INFO 04-10 21:08:52 [__init__.py:239] Automatically detected platform cuda.
INFO:lm_eval.__main__:Selected Tasks: ['mbpp']
INFO:lm_eval.evaluator:Setting random seed to 0 | Setting numpy seed to 1234 | Setting torch manual seed to 1234 | Setting fewshot manual seed to 1234
INFO:lm_eval.evaluator:Initializing vllm model, with arguments: {'pretrained': 'google/gemma-3-4b-it'}
INFO 04-10 21:09:03 [config.py:604] This model supports multiple tasks: {'embed', 'classify', 'reward', 'score', 'generate'}. Defaulting to 'generate'.
INFO 04-10 21:09:03 [config.py:1797] Chunked prefill is enabled with max_num_batched_tokens=16384.
WARNING 04-10 21:09:05 [utils.py:2289] We must use the `spawn` multiprocessing start method. Overriding VLLM_WORKER_MULTIPROC_METHOD to 'spawn'. See https://docs.vllm.ai/en/latest/getting_started/troubleshooting.html#python-multiprocessing for more information. Reason: CUDA is initialized
INFO 04-10 21:09:10 [__init__.py:239] Automatically detected platform cuda.
INFO 04-10 21:09:11 [core.py:61] Initializing a V1 LLM engine (v0.8.3rc2.dev107+g0d4d06fe2) with config: model='google/gemma-3-4b-it', speculative_config=None, tokenizer='google/gemma-3-4b-it', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=131072, download_dir=None, load_format=auto, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar', reasoning_backend=None), observability_config=ObservabilityConfig(show_hidden_metrics=False, otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=1234, served_model_name=google/gemma-3-4b-it, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"level":3,"custom_ops":["none"],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"use_inductor":true,"compile_sizes":[],"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":512}
WARNING 04-10 21:09:12 [utils.py:2429] Methods determine_num_available_blocks,device_config,get_cache_block_size_bytes,initialize_cache not implemented in <vllm.v1.worker.gpu_worker.Worker object at 0x7f8e7726a110>
INFO 04-10 21:09:13 [parallel_state.py:957] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0
INFO 04-10 21:09:13 [cuda.py:221] Using Flash Attention backend on V1 engine.
Using a slow image processor as `use_fast` is unset and a slow processor was saved with this model. `use_fast=True` will be the default behavior in v4.52, even if the model was saved with a slow processor. This will result in minor differences in outputs. You'll still be able to use a slow processor with `use_fast=False`.
INFO 04-10 21:09:18 [gpu_model_runner.py:1277] Starting to load model google/gemma-3-4b-it...
INFO 04-10 21:09:18 [config.py:3351] cudagraph sizes specified by model runner [1, 2, 4, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216, 224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328, 336, 344, 352, 360, 368, 376, 384, 392, 400, 408, 416, 424, 432, 440, 448, 456, 464, 472, 480, 488, 496, 504, 512] is overridden by config [512, 384, 256, 128, 4, 2, 1, 392, 264, 136, 8, 400, 272, 144, 16, 408, 280, 152, 24, 416, 288, 160, 32, 424, 296, 168, 40, 432, 304, 176, 48, 440, 312, 184, 56, 448, 320, 192, 64, 456, 328, 200, 72, 464, 336, 208, 80, 472, 344, 216, 88, 120, 480, 352, 248, 224, 96, 488, 504, 360, 232, 104, 496, 368, 240, 112, 376]
INFO 04-10 21:09:18 [topk_topp_sampler.py:44] Currently, FlashInfer top-p & top-k sampling sampler is disabled because FlashInfer>=v0.2.3 is not backward compatible. Falling back to the PyTorch-native implementation of top-p & top-k sampling.
INFO 04-10 21:09:19 [weight_utils.py:265] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/2 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  50% Completed | 1/2 [00:00<00:00,  1.02it/s]
Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.12it/s]
Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.11it/s]

INFO 04-10 21:09:21 [loader.py:458] Loading weights took 1.91 seconds
INFO 04-10 21:09:21 [gpu_model_runner.py:1292] Model loading took 8.5833 GiB and 2.801590 seconds
INFO 04-10 21:09:21 [gpu_model_runner.py:1561] Encoder cache will be initialized with a budget of 16384 tokens, and profiled with 64 image items of the maximum feature size.
INFO 04-10 21:09:30 [backends.py:416] Using cache directory: /home/yizhenjia/.cache/vllm/torch_compile_cache/1e3a621052/rank_0_0 for vLLM's torch.compile
INFO 04-10 21:09:30 [backends.py:426] Dynamo bytecode transform time: 7.56 s
INFO 04-10 21:09:31 [backends.py:115] Directly load the compiled graph for shape None from the cache
INFO 04-10 21:09:42 [monitor.py:33] torch.compile takes 7.56 s in total
INFO 04-10 21:09:43 [kv_cache_utils.py:634] GPU KV cache size: 387,744 tokens
INFO 04-10 21:09:43 [kv_cache_utils.py:637] Maximum concurrency for 131,072 tokens per request: 2.96x
INFO 04-10 21:10:07 [gpu_model_runner.py:1627] Graph capturing finished in 24 secs, took 2.07 GiB
INFO 04-10 21:10:07 [core.py:162] init engine (profile, create kv cache, warmup model) took 46.22 seconds
INFO 04-10 21:10:07 [core_client.py:435] Core engine process 0 ready.
INFO:lm_eval.models.vllm_causallms:Found 'gemma' in model name, a BOS token will be used as Gemma series models underperform without it.
INFO:lm_eval.evaluator:mbpp: Using gen_kwargs: {'until': ['[DONE]'], 'do_sample': False}
WARNING:lm_eval.evaluator:Overwriting default num_fewshot of mbpp from 3 to 0
INFO:lm_eval.api.task:Building contexts for mbpp on rank 0...
  0%|          | 0/500 [00:00<?, ?it/s] 34%|███▎      | 168/500 [00:00<00:00, 1677.64it/s] 69%|██████▉   | 346/500 [00:00<00:00, 1734.74it/s]100%|██████████| 500/500 [00:00<00:00, 1743.99it/s]
INFO:lm_eval.evaluator:Running generate_until requests
Running generate_until requests:   0%|          | 0/500 [00:00<?, ?it/s]Running generate_until requests:   0%|          | 1/500 [00:02<18:35,  2.24s/it]Running generate_until requests:   7%|▋         | 33/500 [00:04<00:48,  9.61it/s]Running generate_until requests:  13%|█▎        | 65/500 [00:05<00:33, 13.09it/s]Running generate_until requests:  19%|█▉        | 97/500 [00:07<00:27, 14.90it/s]Running generate_until requests:  26%|██▌       | 129/500 [00:09<00:23, 16.10it/s]Running generate_until requests:  32%|███▏      | 161/500 [00:11<00:19, 16.98it/s]Running generate_until requests:  39%|███▊      | 193/500 [00:12<00:17, 17.59it/s]Running generate_until requests:  45%|████▌     | 225/500 [00:14<00:15, 18.02it/s]Running generate_until requests:  51%|█████▏    | 257/500 [00:16<00:13, 18.34it/s]Running generate_until requests:  58%|█████▊    | 289/500 [00:17<00:11, 18.63it/s]Running generate_until requests:  64%|██████▍   | 321/500 [00:19<00:09, 18.83it/s]Running generate_until requests:  71%|███████   | 353/500 [00:21<00:07, 18.96it/s]Running generate_until requests:  77%|███████▋  | 385/500 [00:22<00:06, 19.05it/s]Running generate_until requests:  83%|████████▎ | 417/500 [00:24<00:04, 19.14it/s]Running generate_until requests:  90%|████████▉ | 449/500 [00:26<00:02, 19.21it/s]Running generate_until requests:  96%|█████████▌| 481/500 [00:27<00:00, 19.31it/s]Running generate_until requests: 100%|██████████| 500/500 [00:27<00:00, 18.01it/s]
[rank0]:[W410 21:11:15.784982337 ProcessGroupNCCL.cpp:1496] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator())
INFO:lm_eval.loggers.evaluation_tracker:Saving results aggregated
INFO:lm_eval.loggers.evaluation_tracker:Saving per-sample results for: mbpp
vllm (pretrained=google/gemma-3-4b-it), gen_kwargs: (None), limit: None, num_fewshot: 0, batch_size: 32
|Tasks|Version|Filter|n-shot| Metric  |   |Value|   |Stderr|
|-----|------:|------|-----:|---------|---|----:|---|-----:|
|mbpp |      1|none  |     0|pass_at_1|↑  |    0|±  |     0|

